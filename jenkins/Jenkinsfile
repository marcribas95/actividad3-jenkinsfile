pipeline {
    agent any
    
    environment {
        // Variables de entorno del proyecto
        GIT_REPO = 'https://github.com/marcribas95/actividad3-jenkinsfile.git'
        GIT_BRANCH = 'main'
        PROJECT_DIR = "${WORKSPACE}"
        REPORTS_DIR = "${WORKSPACE}/tests-reports"
    }
    
    options {
        // Mantener los últimos 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Timeout general del pipeline
        timeout(time: 30, unit: 'MINUTES')
        // Timestamps en el log
        timestamps()
        // No permitir builds concurrentes
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo '════════════════════════════════════════════════════════'
                    echo '║  DESCARGANDO CÓDIGO DEL REPOSITORIO'
                    echo '════════════════════════════════════════════════════════'
                }
                
                // Descargar código del repositorio Git
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                ])
                
                script {
                    echo '✓ Código descargado exitosamente'
                    echo "✓ Branch: ${GIT_BRANCH}"
                    echo "✓ Workspace: ${WORKSPACE}"
                }
            }
        }
        
        stage('Setup') {
            steps {
                script {
                    echo '════════════════════════════════════════════════════════'
                    echo '║  CONFIGURANDO ENTORNO'
                    echo '════════════════════════════════════════════════════════'
                }
                
                // Configurar entorno virtual e instalar dependencias
                sh '''
                    make setup
                '''
                
                script {
                    echo '✓ Entorno configurado correctamente'
                }
            }
        }
        
        stage('Test Unitarios') {
            steps {
                script {
                    echo '════════════════════════════════════════════════════════'
                    echo '║  EJECUTANDO PRUEBAS UNITARIAS'
                    echo '════════════════════════════════════════════════════════'
                }
                
                // Ejecutar pruebas unitarias
                sh '''
                    make test-unit
                '''
                
                script {
                    echo '✓ Pruebas unitarias completadas'
                }
            }
            post {
                always {
                    // Publicar resultados de pruebas unitarias
                    junit(
                        testResults: 'tests-reports/test-results-unit-*.xml',
                        allowEmptyResults: true,
                        skipPublishingChecks: true,
                        keepLongStdio: true
                    )
                }
            }
        }
        
        stage('Test API') {
            steps {
                script {
                    echo '════════════════════════════════════════════════════════'
                    echo '║  EJECUTANDO PRUEBAS DE API'
                    echo '════════════════════════════════════════════════════════'
                }
                
                // Ejecutar pruebas de API
                sh '''
                    make test-api
                '''
                
                script {
                    echo '✓ Pruebas de API completadas'
                }
            }
            post {
                always {
                    // Publicar resultados de pruebas de API
                    junit(
                        testResults: 'tests-reports/test-results-api-*.xml',
                        allowEmptyResults: true,
                        skipPublishingChecks: true,
                        keepLongStdio: true
                    )
                }
            }
        }
        
        stage('Test E2E') {
            steps {
                script {
                    echo '════════════════════════════════════════════════════════'
                    echo '║  EJECUTANDO PRUEBAS END-TO-END'
                    echo '════════════════════════════════════════════════════════'
                }
                
                // Ejecutar pruebas e2e con Docker
                sh '''
                    make test-e2e
                '''
                
                script {
                    echo '✓ Pruebas E2E completadas'
                }
            }
            post {
                always {
                    // Publicar resultados de pruebas E2E
                    junit(
                        testResults: 'tests-reports/test-results-e2e-*.xml',
                        allowEmptyResults: true,
                        skipPublishingChecks: true,
                        keepLongStdio: true
                    )
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo '════════════════════════════════════════════════════════'
                echo '║  LIMPIEZA Y FINALIZACIÓN'
                echo '════════════════════════════════════════════════════════'
            }
            
            // Detener servicios Docker si están corriendo
            sh '''
                make docker-down || true
            '''
            
            // Archivar logs y reportes
            archiveArtifacts(
                artifacts: 'tests-reports/*.xml, tests-reports/*.log',
                allowEmptyArchive: true,
                fingerprint: true
            )
            
            script {
                echo '✓ Artefactos archivados'
            }
        }
        
        success {
            script {
                echo ''
                echo '╔════════════════════════════════════════════════════════════╗'
                echo '║  ✓ BUILD EXITOSO - TODAS LAS PRUEBAS PASARON              ║'
                echo '╚════════════════════════════════════════════════════════════╝'
                echo ''
            }
        }
        
        failure {
            script {
                echo ''
                echo '╔════════════════════════════════════════════════════════════╗'
                echo '║  ✗ BUILD FALLIDO - ALGUNAS PRUEBAS FALLARON               ║'
                echo '╚════════════════════════════════════════════════════════════╝'
                echo ''
                
                // Mostrar información del correo que se enviaría
                echo "INFORMACIÓN DEL CORREO:"
                echo "   Trabajo: ${env.JOB_NAME}"
                echo "   Número de ejecución: ${env.BUILD_NUMBER}"
                echo "   URL: ${env.BUILD_URL}"
                
                // Envío de correo electrónico (comentado para no configurar servidor SMTP)
                /*
                emailext(
                    subject: "❌ Build Fallido - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        <html>
                        <body>
                            <h2>Build Fallido</h2>
                            <p><strong>Trabajo:</strong> ${env.JOB_NAME}</p>
                            <p><strong>Número de ejecución:</strong> ${env.BUILD_NUMBER}</p>
                            <p><strong>URL del build:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            <p><strong>Estado:</strong> FAILURE</p>
                            <hr>
                            <p>Por favor, revisa los logs y resultados de las pruebas para más detalles.</p>
                        </body>
                        </html>
                    """,
                    to: 'admin@example.com',
                    mimeType: 'text/html'
                )
                */
            }
        }
        
        unstable {
            script {
                echo ''
                echo '╔════════════════════════════════════════════════════════════╗'
                echo '║  ⚠ BUILD INESTABLE - REVISAR RESULTADOS                   ║'
                echo '╚════════════════════════════════════════════════════════════╝'
                echo ''
            }
        }
    }
}
